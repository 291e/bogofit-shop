generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @unique @default(uuid())
  userId      String       @unique
  password    String?
  isAdmin     Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  email       String       @unique
  profile     String?
  phoneNumber String?      @unique
  name        String

  addresses   Address[]
  carts       Cart[]
  orders      Order[]
  reviews     Review[]
  coupons     CouponUser[]
  providers   Provider[]
}

model Address {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  label     String   // '집', '회사' 등
  recipient String
  zipCode   String
  address1  String
  address2  String?
  phone     String
  isDefault Boolean  @default(false)
}

model Provider {
  id        String   @id @default(uuid())
  provider  String
  socialId  String
  email     String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, socialId])
}

/// PRODUCT ------------------------------------------------------------------
model Product  {
  id        Int      @id @default(autoincrement())
  title     String
  slug          String          @unique
  description   String?
  price     Float
  url       String   @unique
  category  String
  imageUrl  String
  storeName String
  isActive  Boolean   @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  variants      ProductVariant[]
  reviews       Review[]
  orderItems    OrderItem[]
}

model ProductVariant {
  id          Int      @id @default(autoincrement())
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int
  optionName  String   // '색상', '사이즈' 등 조합해서 사용해도 OK
  optionValue String   // 'RED', 'XL' ...
  priceDiff   Int  @default(0) // 옵션가
  stock       Int
  cartItems   CartItem[]
  orderItems  OrderItem[]
  @@unique([productId, optionName, optionValue])
}

/// CART ---------------------------------------------------------------------
model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  items     CartItem[]
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id          Int             @id @default(autoincrement())
  cart        Cart            @relation(fields: [cartId], references: [id])
  cartId      Int
  variant     ProductVariant  @relation(fields: [variantId], references: [id])
  variantId   Int
  quantity    Int
  @@unique([cartId, variantId])
}

/// ORDER & PAYMENT ----------------------------------------------------------
model Order {
  id            String        @id @default(cuid())
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  orderNumber   String        @unique           // 예: YYMMDD-XXXX
  status        OrderStatus   @default(PENDING) // 결제 전, 후, 배송 등
  totalAmount   Int
  items         OrderItem[]
  payment       Payment?
  couponUsedId  Int?          // CouponUser.id (nullable)
  couponUsed    CouponUser?   @relation(fields: [couponUsedId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // 주문자 정보
  ordererName    String?
  ordererEmail   String?
  ordererPhone   String?
  ordererTel     String?

  // 배송지 정보
  recipientName  String?
  recipientPhone String?
  recipientTel   String?
  zipCode        String?
  address1       String?
  address2       String?

  // 통관 정보
  customsId      String?

  // 개인정보 동의
  agreePrivacy   Boolean?
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPING
  COMPLETED
  CANCELED
  FAILED
}

model OrderItem {
  id          Int             @id @default(autoincrement())
  order       Order           @relation(fields: [orderId], references: [id])
  orderId     String
  variant     ProductVariant?  @relation(fields: [variantId], references: [id])
  variantId   Int?
  product     Product?  @relation(fields: [productId], references: [id])
  productId   Int?
  quantity    Int
  unitPrice   Int // 주문 시점 가격
}

/// 결제 정보: PG 응답 전용 (토스 등) --------------------
model Payment {
  id          String   @id @default(cuid())
  order       Order        @relation(fields: [orderId], references: [id])
  userId      String
  orderId     String   @unique
  amount      Int
  status      String   // "PENDING", "SUCCESS", "FAILED"
  method      String?  // 카드, 계좌이체 등
  paymentKey  String?  // Toss 결제키
  failReason  String?  // 실패 사유
  approvedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/// COUPON -------------------------------------------------------------------
model Coupon {
  id            Int       @id @default(autoincrement())
  code          String    @unique
  type          CouponType
  value         Int
  minOrderAmount Int  @default(0)
  validFrom     DateTime
  validTo       DateTime
  isActive      Boolean   @default(true)
  users         CouponUser[]
}

enum CouponType {
  PERCENT      // value = 10  → 10%
  FIXED        // value = 5000 → ₩5,000
}

model CouponUser {
  id         Int       @id @default(autoincrement())
  coupon     Coupon    @relation(fields: [couponId], references: [id])
  couponId   Int
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  issuedAt   DateTime  @default(now())
  usedAt     DateTime?
  isUsed     Boolean   @default(false)
  orders     Order[]
}

/// REVIEW -------------------------------------------------------------------
model Review {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  rating      Int       // 1~5
  content     String
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

/// ETC (Event, FAQ, Notice) --------------------------------------------------
model Event {
  id        Int       @id @default(autoincrement())
  title     String
  description String?
  imageUrl  String?
  startAt   DateTime
  endAt     DateTime
  isActive  Boolean   @default(true)
}

model Faq {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notice {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}